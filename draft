come da richiesta, scriverò un breve paper su come si usa cURL.

Niente di fantasmagorico, solo qualcosa di base base, giusto per quanto serve ai nostri scopi.

come esempio, direi che un riadattamento della funzione che ho usato per il crawler va + che bene. dunque:

[code]
#include <curl/curl.h>
#include <string>
using namespace std;

#define uint unsigned int
int main(int argc, char* argv[])
{
[/code]

ok, credo che qua non ci voglia una grande spiegazione: importo curl e string, uso il namespace, definisco uint.

[code]
CURL* curl;
CURLcode res;
string ret;
[/code]

queste 3 var sono fondamentali: curl conterrà tutte le informazioni necessarie
per l'operazione; CURLcode ci serve per il valore di ritorno di alcune funzioni
(in particolare curl_easy_perform); ret conterrà le informazioni lette dall'url.

[code]
curl = curl_easy_init();
[/code]

prepara il nostro oggetto per il da farsi

[code]
curl_easy_setopt( this->curl, CURLOPT_URL, argv[0]);
curl_easy_setopt( this->curl, CURLOPT_HEADER, 0 );
curl_easy_setopt( this->curl, CURLOPT_WRITEDATA, &ret );
curl_easy_setopt( this->curl, CURLOPT_WRITEFUNCTION, curl_write );
[/code]

queste sono forse le linee di codice più interessanti:
la prima setta quale url va richiamata, per comodità la prendo da argv (il http:// va specificato, altrimenti non saprà
che protocollo usare);
con la seconda opzione diciamo a curl di non includere gli header nel body della risposta (ci sarebbero inutili in questo caso)
la terza linea dice a curl dove scrivere il body della risposta (richiede un puntatore, per questo usami &ret)
l'ultima dice a curl che funzione richiamare per scrivere. Siccome usiamo string invece di char*, 
dobbiamo ridefinirla come spiegherò sotto.

[code] 
